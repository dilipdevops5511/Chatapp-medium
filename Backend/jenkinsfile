pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        AWS_REGION = 'ap-south-1'
        ECR_REPO_URL = '637423531852.dkr.ecr.ap-south-1.amazonaws.com'
        DEPLOYMENT_YAML = 'Backend/k8s_manifest_file/k8s_manifests/backend-deployment.yaml'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/dilipdevops5511/Chatapp-medium.git'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner \
  -Dsonar.projectKey=chat-app \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://13.233.231.215:9000 \
  -Dsonar.token=sqp_662b9cc17bd665b9c67c54bf3f3091a1ce361121'''
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('Verify Dockerfile Presence') {
            steps {
                script {
                    dir('Backend') {
                        sh 'ls -l'
                        sh 'cat Dockerfile'
                    }
                }
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    dir('Backend') {
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'aws'
                        ]]) {
                            sh "aws ecr-public get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.ECR_REPO_URL}"
                            sh "docker build --no-cache -t backend:${env.IMAGE_TAG} ."
                            sh "docker tag backend:${env.IMAGE_TAG} ${env.ECR_REPO_URL}/backend:${env.IMAGE_TAG}"
                            sh "docker push ${env.ECR_REPO_URL}/backend:${env.IMAGE_TAG}"
                        }
                    }
                }
            }
        }
        stage('Update Kubernetes Deployment') {
            steps {
                script {
                    def updatedYaml = readFile(file: "${env.DEPLOYMENT_YAML}").replace('IMAGE_TAG_PLACEHOLDER', "${env.ECR_REPO_URL}/backend:${env.IMAGE_TAG}")
                    writeFile(file: "${env.DEPLOYMENT_YAML}", text: updatedYaml)
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    dir('Backend/k8s_manifest_file/k8s_manifests') {
                        sh "kubectl apply -f ."
                    }
                }
            }
        }
    }
}
